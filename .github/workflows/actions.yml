name: Salesforce Deployments

on:
  pull_request:
    types: [edited, ready_for_review, synchronize, opened]
    branches: 
      - develop
      - svtmerge
      - perftest
      - main

jobs:
  validate_and_deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: npm install sfdx-cli --global

      # Determine target branch and authenticate with Salesforce
      - name: Authenticate with Salesforce based on target branch
        run: |
          case "${{ github.event.pull_request.base.ref }}" in
           "develop")
              echo ${{ secrets.SFDX_AUTH_URL_DEVELOP }} > ./authfile.txt
              sfdx force:auth:sfdxurl:store -f ./authfile.txt --setalias develop_org -s
              ;;
            "svtmerge")
              echo ${{ secrets.SFDX_AUTH_URL_SVTMERGE }} > ./authfile.txt
              sfdx force:auth:sfdxurl:store -f ./authfile.txt --setalias svtmerge_org -s
              ;;
            "perftest")
              echo ${{ secrets.SFDX_AUTH_URL_PERFTEST }} > ./authfile.txt
              sfdx force:auth:sfdxurl:store -f ./authfile.txt --setalias perftest_org -s
              ;;
            "main")
              echo ${{ secrets.SFDX_AUTH_URL_PRODUCTION }} > ./authfile.txt
              sfdx force:auth:sfdxurl:store -f ./authfile.txt --setalias production_org -s
              ;;
            *)
              echo "No matching branch found for deployment"
              exit 1
              ;;
          esac

      # Install the sfdx-git-delta plugin
      - name: Install the sfdx-git-delta plugin
        run: |
          echo 'y' | sfdx plugins:install sfdx-git-delta

      # Generate the package.xml of delta files for validation
      - name: Generate the package.xml for delta files
        run: |
          mkdir -p delta
          echo "Generating delta package.xml"
          # Compare the HEAD of the current branch with the target branch
          sfdx sgd:source:delta --to "HEAD" --from "origin/${{ github.event.pull_request.base.ref }}" --output "./delta" --ignore-whitespace -d -i .sgdignore
          if [ -f delta/package/package.xml ]; then
            echo "--- package.xml generated with added and modified metadata ---"
            cat delta/package/package.xml
          else
            echo "No changes detected or package.xml not created"
          fi

      # Validate Delta Components
      - name: Validate Delta Components
        run: |
          if [ -f delta/package/package.xml ]; then
            echo "Validating delta components..."
            PR_DESCRIPTION=$(jq -r ".pull_request.body" "$GITHUB_EVENT_PATH")
            if [[ $PR_DESCRIPTION == *"RunLocalTests"* ]]; then
              sfdx force:source:deploy -x delta/package/package.xml --checkonly --testlevel RunLocalTests
            elif [[ $PR_DESCRIPTION == *"TestList"* ]]; then
              class=$(echo $PR_DESCRIPTION | grep -E ^TestList | cut -d" " -f2)
              echo $class > testclass.csv 
              cat testclass.csv
              sfdx force:source:deploy -x delta/package/package.xml --checkonly --testlevel RunSpecifiedTests -r 'cat testclass.csv' 
            else
              sfdx force:source:deploy -x delta/package/package.xml --checkonly
            fi
          else
            echo "No changes detected or package.xml not created."
          fi

      # Validate Destructive Changes
      - name: Validate Destructive Changes
        run: |
          if [ -f delta/destructiveChanges/destructiveChanges.xml ]; then
            echo "Validating destructive changes..."
            sfdx force:mdapi:deploy -d delta/destructiveChanges --ignorewarnings --checkonly
          else
            echo "No destructive changes to validate."
          fi
        continue-on-error: true

      # Deploy Delta Components
      - name: Deploy Delta Components
        run: |
          if [ -f delta/package/package.xml]; then
            echo "Deploying delta components..."
            sfdx force:source:deploy -x delta/package/package.xml
          else
            echo "No changes detected or package.xml not created."
          fi

      # Deploy Destructive Changes
      - name: Deploy Destructive Changes
        run: |
          if [ -f delta/destructiveChanges/destructiveChanges.xml ]; then
            echo "Deploying destructive changes..."
            sfdx force:mdapi:deploy -d delta/destructiveChanges --ignorewarnings
          else
            echo "No destructive changes to deploy."
          fi
        continue-on-error: true

      # Upload delta folder for inspection
      - name: Upload delta folder
        uses: actions/upload-artifact@v4
        with:
          name: delta
          path: delta/

  back_promotion_to_avengers_and_conquerors:
    if: github.event.pull_request.merged == true && (github.ref == 'refs/heads/avengers' || github.ref == 'refs/heads/conquerors')
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: npm install sfdx-cli --global

      # Determine target branch and authenticate with Salesforce
      - name: Authenticate with Salesforce based on target branch
        run: |
          case "${{ github.ref }}" in
            "refs/heads/avengers")
              echo ${{ secrets.SFDX_AUTH_URL_AVENGERS }} > ./authfile.txt
              sfdx force:auth:sfdxurl:store -f ./authfile.txt --setalias avengers_org -s
              ;;
            "refs/heads/conquerors")
              echo ${{ secrets.SFDX_AUTH_URL_CONQUERORS }} > ./authfile.txt
              sfdx force:auth:sfdxurl:store -f ./authfile.txt --setalias conquerors_org -s
              ;;
            *)
              echo "No matching branch found for full deployment"
              exit 1
              ;;
          esac

      # Full Deployment
      - name: Full Deployment
        run: |
          echo "Deploying all components..."
          sfdx force:source:deploy -p force-app --testlevel NoTestRun
