name: Salesforce Deployments

on:
  pull_request:
    types: [edited, reopened, ready_for_review, synchronize, opened]
    branches: 
      - develop

  pull_request_target:
    types: [closed]

jobs:
    run_pmd_and_validate:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest

      steps:
      
      # Checkout source code
        - name: Checkout source code
          uses: actions/checkout@v4
          with: 
           fetch-depth: 0  # Fetch the entire history for accurate delta calculation
        #fetch-depth: 10  # Fetch the last 10 commit
      
      # Install salesforce cli
        - name: Install salesforce cli
          run: |
            npm install sfdx-cli --global

      # Authenticate with Salesforce
        - name: Authenticate with Salesforce
          run: |
            echo ${{ secrets.SFDX_AUTH_URL }} > ./authfile.txt
            sfdx force:auth:sfdxurl:store -f ./authfile.txt --setalias target_poc -s

       # Install PMD
        - name: Install PMD
          run: |
            PMD_VERSION=`cat pmd/pmd-version.txt`
                wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
                unzip pmd-bin-$PMD_VERSION.zip -d ~
                mv ~/pmd-bin-$PMD_VERSION ~/pmd
                ~/pmd/bin/run.sh pmd --version

      # Run PMD scan
        - name: 'Run PMD scan'
          run: ~/pmd/bin/run.sh pmd -d force-app -R pmd/ruleset.xml -f text

      # Upload PMD Report
        - name: Upload PMD Report
          uses: actions/upload-artifact@v4
          with:
            name: pmd-report
            path: pmd/pmd-report.txt

      # Install the sfdx-git-delta plugin     
        - name: Install the sfdx-git-delta plugin
          run: |
            echo 'y' | sfdx plugins:install sfdx-git-delta

       # Generate the package.xml for delta files     
        - name: Generate the package.xml for delta files
          run: |
            mkdir -p delta
            echo "Generating delta package.xml"
            git diff --name-only HEAD..HEAD~2
            sfdx sgd:source:delta --to "HEAD" --from "HEAD~2" --output "./delta" --ignore-whitespace -d -i .sgdignore
            if [ -f delta/package/package.xml ]; then
              echo "--- package.xml generated with added and modified metadata ---"
              cat delta/package/package.xml
            else
              echo "No changes detected or package.xml not created"
            fi
    # ls -l delta/package - List contents of delta/package directory for debugging

    # Run validation against the org    
        - name: Run validation against the org
          run: |
            if [ -f delta/package/package.xml ]; then
              echo "Validating delta components..."
              sfdx force:source:deploy -x delta/package/package.xml --checkonly  
            else
              echo "No changes detected or package.xml not created."
            fi
    
    deploy_delta_code:
    #if: github.event_name == 'push' && github.event.head_commit.message == 'Merge pull request'
       if: github.event.pull_request.merged == true
       runs-on: ubuntu-latest
       needs: run_pmd_and_validate

       steps:
      # Checkout source code
        - name: Checkout source code
          uses: actions/checkout@v4
          with: 
           fetch-depth: 0

      # Authenticate with Salesforce
        - name: Authenticate with Salesforce
          run: |
            echo ${{ secrets.SFDX_AUTH_URL }} > ./authfile.txt
            sfdx force:auth:sfdxurl:store -f ./authfile.txt --setalias target_poc -s

      # Deploy delta package    
        - name: Deploy delta package
          run: |
            if [ -f delta/package/package.xml ]; then
              echo "Deploying delta components..."
              sfdx force:source:deploy -x delta/package/package.xml 
            else
              echo "No changes detected or package.xml not created."
            fi
          continue-on-error: true

    # Destructive Changes
        - name: Destructive Changes
          run: |
            echo "--- destructiveChanges.xml generated with deleted metadata ---"
            cat delta/destructiveChanges/destructiveChanges.xml
            echo
            if [ delta/destructiveChanges/destructiveChanges.xml ]; then
              echo "Deploying destructive changes..."
              sfdx force:mdapi:deploy -d delta/destructiveChanges -w 10 --ignorewarnings 
            else
              echo "No destructive changes to deploy."
            fi
          continue-on-error: true
